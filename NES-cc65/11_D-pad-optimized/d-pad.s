;
; File generated by cc65 v 2.18 - Ubuntu 2.18-1
;
	.fopt		compiler,"cc65 v 2.18 - Ubuntu 2.18-1"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_pal_bg
	.import		_pal_spr
	.import		_ppu_wait_nmi
	.import		_ppu_off
	.import		_ppu_on_all
	.import		_oam_clear
	.import		_oam_meta_spr
	.import		_pad_poll
	.import		_bank_spr
	.import		_bank_bg
	.import		_vram_adr
	.import		_vram_put
	.import		_vram_fill
	.export		_i
	.export		_address
	.export		_pad
	.export		_x1
	.export		_y1
	.export		_x2
	.export		_background_palette
	.export		_sprite_palette
	.export		_metasprite1
	.export		_metasprite2
	.export		_fill_in_ppu_ram
	.export		_fill_in_attributes
	.export		_game_loop
	.export		_main

.segment	"DATA"

_x1:
	.byte	$0A
_y1:
	.byte	$14
_x2:
	.byte	$14

.segment	"RODATA"

_background_palette:
	.byte	$22
	.byte	$29
	.byte	$1A
	.byte	$0F
	.byte	$22
	.byte	$36
	.byte	$17
	.byte	$0F
	.byte	$22
	.byte	$30
	.byte	$21
	.byte	$0F
	.byte	$22
	.byte	$27
	.byte	$17
	.byte	$0F
_sprite_palette:
	.byte	$22
	.byte	$16
	.byte	$27
	.byte	$18
	.byte	$22
	.byte	$1A
	.byte	$30
	.byte	$27
	.byte	$22
	.byte	$16
	.byte	$30
	.byte	$27
	.byte	$22
	.byte	$0F
	.byte	$36
	.byte	$17
_metasprite1:
	.byte	$0A
	.byte	$0A
	.byte	$00
	.byte	$00
	.byte	$12
	.byte	$0A
	.byte	$01
	.byte	$00
	.byte	$0A
	.byte	$12
	.byte	$02
	.byte	$00
	.byte	$12
	.byte	$12
	.byte	$03
	.byte	$00
	.byte	$0A
	.byte	$14
	.byte	$04
	.byte	$00
	.byte	$12
	.byte	$14
	.byte	$05
	.byte	$00
	.byte	$0A
	.byte	$1C
	.byte	$06
	.byte	$00
	.byte	$12
	.byte	$1C
	.byte	$07
	.byte	$00
	.byte	$80
_metasprite2:
	.byte	$12
	.byte	$0A
	.byte	$08
	.byte	$43
	.byte	$0A
	.byte	$0A
	.byte	$09
	.byte	$43
	.byte	$12
	.byte	$12
	.byte	$0A
	.byte	$43
	.byte	$0A
	.byte	$12
	.byte	$0B
	.byte	$43
	.byte	$12
	.byte	$14
	.byte	$0C
	.byte	$43
	.byte	$0A
	.byte	$14
	.byte	$0D
	.byte	$43
	.byte	$12
	.byte	$1C
	.byte	$0E
	.byte	$43
	.byte	$0A
	.byte	$1C
	.byte	$0F
	.byte	$43
	.byte	$80

.segment	"BSS"

.segment	"ZEROPAGE"
_i:
	.res	2,$00
_address:
	.res	2,$00
_pad:
	.res	1,$00

; ---------------------------------------------------------------
; void __near__ fill_in_ppu_ram (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_fill_in_ppu_ram: near

.segment	"CODE"

;
; vram_adr(NTADR_A(0, 0));
;
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; for (i = 0; i < 32 * 30; i++) {
;
	lda     #$00
	sta     _i
	sta     _i+1
L006F:	lda     _i
	cmp     #$C0
	lda     _i+1
	sbc     #$03
	bvc     L0076
	eor     #$80
L0076:	bpl     L0070
;
; vram_put(36);
;
	lda     #$24
	jsr     _vram_put
;
; for (i = 0; i < 32 * 30; i++) {
;
	lda     _i
	ldx     _i+1
	clc
	adc     #$01
	bcc     L0078
	inx
L0078:	sta     _i
	stx     _i+1
	jmp     L006F
;
; }
;
L0070:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ fill_in_attributes (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_fill_in_attributes: near

.segment	"CODE"

;
; vram_adr(ATTRIBUTE_TABLE);
;
	ldx     #$23
	lda     #$C0
	jsr     _vram_adr
;
; vram_fill(0, 16);
;
	lda     #$00
	jsr     pusha
	tax
	lda     #$10
	jsr     _vram_fill
;
; vram_fill(0x55, 16);
;
	lda     #$55
	jsr     pusha
	ldx     #$00
	lda     #$10
	jsr     _vram_fill
;
; vram_fill(0xAA, 16);
;
	lda     #$AA
	jsr     pusha
	ldx     #$00
	lda     #$10
	jsr     _vram_fill
;
; vram_fill(0xFF, 16);
;
	lda     #$FF
	jsr     pusha
	ldx     #$00
	lda     #$10
	jmp     _vram_fill

.endproc

; ---------------------------------------------------------------
; void __near__ game_loop (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_game_loop: near

.segment	"CODE"

;
; ppu_wait_nmi();
;
L008B:	jsr     _ppu_wait_nmi
;
; oam_clear();
;
	jsr     _oam_clear
;
; pad = pad_poll(0);
;
	lda     #$00
	jsr     _pad_poll
	sta     _pad
;
; if (pad & PAD_LEFT) {
;
	and     #$02
	beq     L00BB
;
; x1--;
;
	dec     _x1
;
; if (pad & PAD_RIGHT) {
;
L00BB:	lda     _pad
	and     #$01
	beq     L00BC
;
; x1++;
;
	inc     _x1
;
; if (pad & PAD_UP) {
;
L00BC:	lda     _pad
	and     #$08
	beq     L00BD
;
; y1--;
;
	dec     _y1
;
; if (pad & PAD_DOWN) {
;
L00BD:	lda     _pad
	and     #$04
	beq     L00BE
;
; y1++;
;
	inc     _y1
;
; x2--;
;
L00BE:	dec     _x2
;
; if (x2 == 0) {
;
	lda     _x2
	bne     L00A1
;
; x2 = 256;
;
	sta     _x2
;
; oam_meta_spr(x1, y1, metasprite1);
;
L00A1:	jsr     decsp2
	lda     _x1
	ldy     #$01
	sta     (sp),y
	lda     _y1
	dey
	sta     (sp),y
	lda     #<(_metasprite1)
	ldx     #>(_metasprite1)
	jsr     _oam_meta_spr
;
; oam_meta_spr(x2, 10, metasprite2);
;
	jsr     decsp2
	lda     _x2
	ldy     #$01
	sta     (sp),y
	lda     #$0A
	dey
	sta     (sp),y
	lda     #<(_metasprite2)
	ldx     #>(_metasprite2)
	jsr     _oam_meta_spr
;
; while (1) {
;
	jmp     L008B

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; ppu_off();
;
	jsr     _ppu_off
;
; pal_bg(background_palette);
;
	lda     #<(_background_palette)
	ldx     #>(_background_palette)
	jsr     _pal_bg
;
; pal_spr(sprite_palette);
;
	lda     #<(_sprite_palette)
	ldx     #>(_sprite_palette)
	jsr     _pal_spr
;
; bank_bg(1);
;
	lda     #$01
	jsr     _bank_bg
;
; bank_spr(0);
;
	lda     #$00
	jsr     _bank_spr
;
; fill_in_ppu_ram();
;
	jsr     _fill_in_ppu_ram
;
; fill_in_attributes();
;
	jsr     _fill_in_attributes
;
; ppu_on_all();
;
	jsr     _ppu_on_all
;
; game_loop();
;
	jmp     _game_loop

.endproc


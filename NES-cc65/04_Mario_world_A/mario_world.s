;
; File generated by cc65 v 2.18 - Ubuntu 2.18-1
;
	.fopt		compiler,"cc65 v 2.18 - Ubuntu 2.18-1"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_pal_bg
	.import		_ppu_off
	.import		_ppu_on_all
	.import		_vram_adr
	.import		_vram_put
	.import		_vram_fill
	.export		_i
	.export		_address
	.export		_palette
	.export		_fill_in_ppu_ram
	.export		_fill_in_attributes
	.export		_game_loop
	.export		_main

.segment	"RODATA"

_palette:
	.byte	$22
	.byte	$29
	.byte	$1A
	.byte	$0F
	.byte	$22
	.byte	$36
	.byte	$17
	.byte	$0F
	.byte	$22
	.byte	$30
	.byte	$21
	.byte	$0F
	.byte	$22
	.byte	$27
	.byte	$17
	.byte	$0F
	.byte	$22
	.byte	$16
	.byte	$27
	.byte	$18
	.byte	$22
	.byte	$1A
	.byte	$30
	.byte	$27
	.byte	$22
	.byte	$16
	.byte	$30
	.byte	$27
	.byte	$22
	.byte	$0F
	.byte	$36
	.byte	$17

.segment	"BSS"

.segment	"ZEROPAGE"
_i:
	.res	2,$00
_address:
	.res	2,$00

; ---------------------------------------------------------------
; void __near__ fill_in_ppu_ram (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_fill_in_ppu_ram: near

.segment	"CODE"

;
; vram_adr(NTADR_A(0, 0));
;
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; for (i = 0; i < 32 * 30; i++) {
;
	lda     #$00
	sta     _i
	sta     _i+1
L002B:	lda     _i
	cmp     #$C0
	lda     _i+1
	sbc     #$03
	bvc     L0032
	eor     #$80
L0032:	bpl     L002C
;
; vram_put(i);
;
	lda     _i
	jsr     _vram_put
;
; for (i = 0; i < 32 * 30; i++) {
;
	lda     _i
	ldx     _i+1
	clc
	adc     #$01
	bcc     L0034
	inx
L0034:	sta     _i
	stx     _i+1
	jmp     L002B
;
; }
;
L002C:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ fill_in_attributes (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_fill_in_attributes: near

.segment	"CODE"

;
; vram_adr(ATTRIBUTE_TABLE);
;
	ldx     #$23
	lda     #$C0
	jsr     _vram_adr
;
; vram_fill(0, 16);
;
	lda     #$00
	jsr     pusha
	tax
	lda     #$10
	jsr     _vram_fill
;
; vram_fill(0x55, 16);
;
	lda     #$55
	jsr     pusha
	ldx     #$00
	lda     #$10
	jsr     _vram_fill
;
; vram_fill(0xAA, 16);
;
	lda     #$AA
	jsr     pusha
	ldx     #$00
	lda     #$10
	jsr     _vram_fill
;
; vram_fill(0xFF, 16);
;
	lda     #$FF
	jsr     pusha
	ldx     #$00
	lda     #$10
	jmp     _vram_fill

.endproc

; ---------------------------------------------------------------
; void __near__ game_loop (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_game_loop: near

.segment	"CODE"

;
; while (1) {
;
L0053:	jmp     L0053

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; ppu_off();
;
	jsr     _ppu_off
;
; pal_bg(palette);
;
	lda     #<(_palette)
	ldx     #>(_palette)
	jsr     _pal_bg
;
; fill_in_ppu_ram();
;
	jsr     _fill_in_ppu_ram
;
; fill_in_attributes();
;
	jsr     _fill_in_attributes
;
; ppu_on_all();
;
	jsr     _ppu_on_all
;
; game_loop();
;
	jmp     _game_loop

.endproc


;
; File generated by cc65 v 2.18 - Ubuntu 2.18-1
;
	.fopt		compiler,"cc65 v 2.18 - Ubuntu 2.18-1"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_pal_bg
	.import		_ppu_off
	.import		_ppu_on_all
	.import		_bank_bg
	.import		_vram_adr
	.import		_vram_put
	.export		_i
	.export		_text
	.export		_palette
	.export		_game_loop
	.export		_print_on_screen
	.export		_main

.segment	"RODATA"

_text:
	.byte	$48,$65,$6C,$6C,$6F,$20,$57,$6F,$72,$6C,$64,$21,$00
_palette:
	.byte	$22
	.byte	$29
	.byte	$1A
	.byte	$0F
	.byte	$22
	.byte	$36
	.byte	$17
	.byte	$0F
	.byte	$22
	.byte	$30
	.byte	$21
	.byte	$0F
	.byte	$22
	.byte	$27
	.byte	$17
	.byte	$0F
	.byte	$22
	.byte	$16
	.byte	$27
	.byte	$18
	.byte	$22
	.byte	$1A
	.byte	$30
	.byte	$27
	.byte	$22
	.byte	$16
	.byte	$30
	.byte	$27
	.byte	$22
	.byte	$0F
	.byte	$36
	.byte	$17

.segment	"BSS"

.segment	"ZEROPAGE"
_i:
	.res	1,$00

; ---------------------------------------------------------------
; void __near__ game_loop (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_game_loop: near

.segment	"CODE"

;
; while (1) {
;
L0046:	jmp     L0046

.endproc

; ---------------------------------------------------------------
; void __near__ print_on_screen (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_print_on_screen: near

.segment	"CODE"

;
; vram_adr(NTADR_A(10, 14));
;
	ldx     #$21
	lda     #$CA
	jsr     _vram_adr
;
; i = 0;
;
	lda     #$00
	sta     _i
;
; while (text[i]) {
;
	jmp     L0034
;
; vram_put(text[i]);
;
L0032:	ldy     _i
	lda     _text,y
	jsr     _vram_put
;
; i++;
;
	inc     _i
;
; while (text[i]) {
;
L0034:	ldy     _i
	lda     _text,y
	bne     L0032
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; ppu_off();
;
	jsr     _ppu_off
;
; pal_bg(palette);
;
	lda     #<(_palette)
	ldx     #>(_palette)
	jsr     _pal_bg
;
; bank_bg(0);
;
	lda     #$00
	jsr     _bank_bg
;
; print_on_screen();
;
	jsr     _print_on_screen
;
; ppu_on_all();
;
	jsr     _ppu_on_all
;
; game_loop();
;
	jmp     _game_loop

.endproc


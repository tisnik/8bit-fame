ca65 V2.18 - Ubuntu 2.18-1
Main file   : assembly2.asm
Current file: assembly2.asm

000000r 1               ;
000000r 1               ; File generated by cc65 v 2.18 - Ubuntu 2.18-1
000000r 1               ;
000000r 1                       .fopt           compiler,"cc65 v 2.18 - Ubuntu 2.18-1"
000000r 1                       .setcpu         "6502"
000000r 1                       .smart          on
000000r 1                       .autoimport     on
000000r 1                       .case           on
000000r 1                       .debuginfo      off
000000r 1                       .importzp       sp, sreg, regsave, regbank
000000r 1                       .importzp       tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
000000r 1                       .macpack        longbranch
000000r 2               .macro  jeq     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                       bne     *+5
000000r 2                       jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               beq     Target
000000r 2                       .else
000000r 2                               bne     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jne     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bne     Target
000000r 2                       .else
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jmi     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bmi     Target
000000r 2                       .else
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jpl     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bpl     Target
000000r 2                       .else
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcs     Target
000000r 2                       .else
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcc     Target
000000r 2                       .else
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvs     Target
000000r 2                       .else
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvc     Target
000000r 2                       .else
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               
000000r 1                       .forceimport    __STARTUP__
000000r 1                       .export         _main
000000r 1               
000000r 1               ; ---------------------------------------------------------------
000000r 1               ; void __near__ main (void)
000000r 1               ; ---------------------------------------------------------------
000000r 1               
000000r 1               .segment        "CODE"
000000r 1               
000000r 1               .proc   _main: near
000000r 1               
000000r 1               .segment        "CODE"
000000r 1               
000000r 1               ;
000000r 1               ; register unsigned char a;
000000r 1               ;
000000r 1  A5 rr                lda     regbank+5
000002r 1  20 rr rr             jsr     pusha
000005r 1               ;
000005r 1               ; __asm__ ("lda #1");
000005r 1               ;
000005r 1  A9 01                lda     #1
000007r 1               ;
000007r 1               ; __asm__ ("clc");
000007r 1               ;
000007r 1  18                   clc
000008r 1               ;
000008r 1               ; __asm__ ("adc #2");
000008r 1               ;
000008r 1  69 02                adc     #2
00000Ar 1               ;
00000Ar 1               ; __asm__ ("sta %v", a);
00000Ar 1               ;
00000Ar 1  85 rr                sta     regbank+5
00000Cr 1               ;
00000Cr 1               ; }
00000Cr 1               ;
00000Cr 1  A0 00                ldy     #$00
00000Er 1  B1 rr                lda     (sp),y
000010r 1  85 rr                sta     regbank+5
000012r 1  4C rr rr             jmp     incsp1
000015r 1               
000015r 1               .endproc
000015r 1               
000015r 1               

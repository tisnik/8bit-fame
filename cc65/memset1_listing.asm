ca65 V2.18 - Ubuntu 2.18-1
Main file   : memset1.asm
Current file: memset1.asm

000000r 1               ;
000000r 1               ; File generated by cc65 v 2.18 - Ubuntu 2.18-1
000000r 1               ;
000000r 1                       .fopt           compiler,"cc65 v 2.18 - Ubuntu 2.18-1"
000000r 1                       .setcpu         "6502"
000000r 1                       .smart          on
000000r 1                       .autoimport     on
000000r 1                       .case           on
000000r 1                       .debuginfo      off
000000r 1                       .importzp       sp, sreg, regsave, regbank
000000r 1                       .importzp       tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
000000r 1                       .macpack        longbranch
000000r 2               .macro  jeq     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                       bne     *+5
000000r 2                       jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               beq     Target
000000r 2                       .else
000000r 2                               bne     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jne     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bne     Target
000000r 2                       .else
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jmi     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bmi     Target
000000r 2                       .else
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jpl     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bpl     Target
000000r 2                       .else
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcs     Target
000000r 2                       .else
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcc     Target
000000r 2                       .else
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvs     Target
000000r 2                       .else
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvc     Target
000000r 2                       .else
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               
000000r 1                       .forceimport    __STARTUP__
000000r 1                       .export         _memset8
000000r 1                       .export         _main
000000r 1               
000000r 1               ; ---------------------------------------------------------------
000000r 1               ; void __near__ memset8 (__near__ unsigned char *, unsigned char, unsigned char)
000000r 1               ; ---------------------------------------------------------------
000000r 1               
000000r 1               .segment        "CODE"
000000r 1               
000000r 1               .proc   _memset8: near
000000r 1               
000000r 1               .segment        "BSS"
000000r 1               
000000r 1               L0002:
000000r 1  00 00                .res    2,$00
000002r 1               
000002r 1               .segment        "CODE"
000000r 1               
000000r 1               ;
000000r 1               ; {
000000r 1               ;
000000r 1  20 rr rr             jsr     pusha
000003r 1               ;
000003r 1               ; for (i = 0; i < n; i++) {
000003r 1               ;
000003r 1  A9 00                lda     #$00
000005r 1  8D rr rr             sta     L0002
000008r 1  8D rr rr             sta     L0002+1
00000Br 1  AD rr rr     L0003:  lda     L0002
00000Er 1  A0 00                ldy     #$00
000010r 1  D1 rr                cmp     (sp),y
000012r 1  AD rr rr             lda     L0002+1
000015r 1  E9 00                sbc     #$00
000017r 1  B0 2A                bcs     L0004
000019r 1               ;
000019r 1               ; dest[i] = c;
000019r 1               ;
000019r 1  A0 03                ldy     #$03
00001Br 1  20 rr rr             jsr     ldaxysp
00001Er 1  18                   clc
00001Fr 1  6D rr rr             adc     L0002
000022r 1  85 rr                sta     ptr1
000024r 1  8A                   txa
000025r 1  6D rr rr             adc     L0002+1
000028r 1  85 rr                sta     ptr1+1
00002Ar 1  A0 01                ldy     #$01
00002Cr 1  B1 rr                lda     (sp),y
00002Er 1  88                   dey
00002Fr 1  91 rr                sta     (ptr1),y
000031r 1               ;
000031r 1               ; for (i = 0; i < n; i++) {
000031r 1               ;
000031r 1  AD rr rr             lda     L0002
000034r 1  AE rr rr             ldx     L0002+1
000037r 1  20 rr rr             jsr     incax1
00003Ar 1  8D rr rr             sta     L0002
00003Dr 1  8E rr rr             stx     L0002+1
000040r 1  4C rr rr             jmp     L0003
000043r 1               ;
000043r 1               ; }
000043r 1               ;
000043r 1  4C rr rr     L0004:  jmp     incsp4
000046r 1               
000046r 1               .endproc
000046r 1               
000046r 1               ; ---------------------------------------------------------------
000046r 1               ; int __near__ main (void)
000046r 1               ; ---------------------------------------------------------------
000046r 1               
000046r 1               .segment        "CODE"
000046r 1               
000046r 1               .proc   _main: near
000046r 1               
000046r 1               .segment        "BSS"
000002r 1               
000002r 1               L000F:
000002r 1  00 00                .res    2,$00
000004r 1               L0011:
000004r 1  00                   .res    1,$00
000005r 1               L0013:
000005r 1  00                   .res    1,$00
000006r 1               
000006r 1               .segment        "CODE"
000046r 1               
000046r 1               ;
000046r 1               ; uint8_t *dest = (uint8_t *) 0x0600;
000046r 1               ;
000046r 1  A2 06                ldx     #$06
000048r 1  A9 00                lda     #$00
00004Ar 1  8D rr rr             sta     L000F
00004Dr 1  8E rr rr             stx     L000F+1
000050r 1               ;
000050r 1               ; uint8_t bytes = 0xff;
000050r 1               ;
000050r 1  A9 FF                lda     #$FF
000052r 1  8D rr rr             sta     L0011
000055r 1               ;
000055r 1               ; uint8_t fill = 0x00;
000055r 1               ;
000055r 1  A9 00                lda     #$00
000057r 1  8D rr rr             sta     L0013
00005Ar 1               ;
00005Ar 1               ; memset8(dest, fill, bytes);
00005Ar 1               ;
00005Ar 1  AD rr rr             lda     L000F
00005Dr 1  AE rr rr             ldx     L000F+1
000060r 1  20 rr rr             jsr     pushax
000063r 1  AD rr rr             lda     L0013
000066r 1  20 rr rr             jsr     pusha
000069r 1  AD rr rr             lda     L0011
00006Cr 1  20 rr rr             jsr     _memset8
00006Fr 1               ;
00006Fr 1               ; return 0;
00006Fr 1               ;
00006Fr 1  A2 00                ldx     #$00
000071r 1  8A                   txa
000072r 1               ;
000072r 1               ; }
000072r 1               ;
000072r 1  60                   rts
000073r 1               
000073r 1               .endproc
000073r 1               
000073r 1               

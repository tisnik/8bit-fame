ca65 V2.18 - Ubuntu 2.18-1
Main file   : local_add_2.asm
Current file: local_add_2.asm

000000r 1               ;
000000r 1               ; File generated by cc65 v 2.18 - Ubuntu 2.18-1
000000r 1               ;
000000r 1                       .fopt           compiler,"cc65 v 2.18 - Ubuntu 2.18-1"
000000r 1                       .setcpu         "6502"
000000r 1                       .smart          on
000000r 1                       .autoimport     on
000000r 1                       .case           on
000000r 1                       .debuginfo      off
000000r 1                       .importzp       sp, sreg, regsave, regbank
000000r 1                       .importzp       tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
000000r 1                       .macpack        longbranch
000000r 2               .macro  jeq     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                       bne     *+5
000000r 2                       jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               beq     Target
000000r 2                       .else
000000r 2                               bne     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jne     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bne     Target
000000r 2                       .else
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jmi     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bmi     Target
000000r 2                       .else
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jpl     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bpl     Target
000000r 2                       .else
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcs     Target
000000r 2                       .else
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcc     Target
000000r 2                       .else
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvs     Target
000000r 2                       .else
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvc     Target
000000r 2                       .else
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               
000000r 1                       .forceimport    __STARTUP__
000000r 1                       .export         _main
000000r 1               
000000r 1               ; ---------------------------------------------------------------
000000r 1               ; void __near__ main (void)
000000r 1               ; ---------------------------------------------------------------
000000r 1               
000000r 1               .segment        "CODE"
000000r 1               
000000r 1               .proc   _main: near
000000r 1               
000000r 1               .segment        "CODE"
000000r 1               
000000r 1               ;
000000r 1               ; a = 10;
000000r 1               ;
000000r 1  20 rr rr             jsr     decsp3
000003r 1  A2 00                ldx     #$00
000005r 1  A9 0A                lda     #$0A
000007r 1  A0 02                ldy     #$02
000009r 1  91 rr                sta     (sp),y
00000Br 1               ;
00000Br 1               ; b = 20;
00000Br 1               ;
00000Br 1  A2 00                ldx     #$00
00000Dr 1  A9 14                lda     #$14
00000Fr 1  A0 01                ldy     #$01
000011r 1  91 rr                sta     (sp),y
000013r 1               ;
000013r 1               ; c = a + b;
000013r 1               ;
000013r 1  A0 02                ldy     #$02
000015r 1  A2 00                ldx     #$00
000017r 1  B1 rr                lda     (sp),y
000019r 1  20 rr rr             jsr     pushax
00001Cr 1  A0 03                ldy     #$03
00001Er 1  A2 00                ldx     #$00
000020r 1  B1 rr                lda     (sp),y
000022r 1  20 rr rr             jsr     tosaddax
000025r 1  A2 00                ldx     #$00
000027r 1  A0 00                ldy     #$00
000029r 1  91 rr                sta     (sp),y
00002Br 1               ;
00002Br 1               ; }
00002Br 1               ;
00002Br 1  20 rr rr             jsr     incsp3
00002Er 1  60                   rts
00002Fr 1               
00002Fr 1               .endproc
00002Fr 1               
00002Fr 1               

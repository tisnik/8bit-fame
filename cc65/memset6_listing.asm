ca65 V2.18 - Ubuntu 2.18-1
Main file   : memset6.asm
Current file: memset6.asm

000000r 1               ;
000000r 1               ; File generated by cc65 v 2.18 - Ubuntu 2.18-1
000000r 1               ;
000000r 1                       .fopt           compiler,"cc65 v 2.18 - Ubuntu 2.18-1"
000000r 1                       .setcpu         "6502"
000000r 1                       .smart          on
000000r 1                       .autoimport     on
000000r 1                       .case           on
000000r 1                       .debuginfo      off
000000r 1                       .importzp       sp, sreg, regsave, regbank
000000r 1                       .importzp       tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
000000r 1                       .macpack        longbranch
000000r 2               .macro  jeq     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                       bne     *+5
000000r 2                       jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               beq     Target
000000r 2                       .else
000000r 2                               bne     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jne     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bne     Target
000000r 2                       .else
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jmi     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bmi     Target
000000r 2                       .else
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jpl     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bpl     Target
000000r 2                       .else
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcs     Target
000000r 2                       .else
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcc     Target
000000r 2                       .else
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvs     Target
000000r 2                       .else
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvc     Target
000000r 2                       .else
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               
000000r 1                       .forceimport    __STARTUP__
000000r 1                       .export         _memset8
000000r 1                       .export         _main
000000r 1               
000000r 1               ; ---------------------------------------------------------------
000000r 1               ; void __near__ memset8 (__near__ unsigned char *, const unsigned char, const unsigned char)
000000r 1               ; ---------------------------------------------------------------
000000r 1               
000000r 1               .segment        "CODE"
000000r 1               
000000r 1               .proc   _memset8: near
000000r 1               
000000r 1               .segment        "BSS"
000000r 1               
000000r 1               L0002:
000000r 1  00                   .res    1,$00
000001r 1               
000001r 1               .segment        "CODE"
000000r 1               
000000r 1               ;
000000r 1               ; {
000000r 1               ;
000000r 1  20 rr rr             jsr     pusha
000003r 1               ;
000003r 1               ; for (i = 0; i < n; i++) {
000003r 1               ;
000003r 1  A9 00                lda     #$00
000005r 1  8D rr rr             sta     L0002
000008r 1  AD rr rr     L001B:  lda     L0002
00000Br 1  A0 00                ldy     #$00
00000Dr 1  D1 rr                cmp     (sp),y
00000Fr 1  B0 1D                bcs     L0004
000011r 1               ;
000011r 1               ; *(dest+i) = c;
000011r 1               ;
000011r 1  A0 03                ldy     #$03
000013r 1  20 rr rr             jsr     ldaxysp
000016r 1  18                   clc
000017r 1  6D rr rr             adc     L0002
00001Ar 1  90 01                bcc     L001A
00001Cr 1  E8                   inx
00001Dr 1  85 rr        L001A:  sta     ptr1
00001Fr 1  86 rr                stx     ptr1+1
000021r 1  A0 01                ldy     #$01
000023r 1  B1 rr                lda     (sp),y
000025r 1  88                   dey
000026r 1  91 rr                sta     (ptr1),y
000028r 1               ;
000028r 1               ; for (i = 0; i < n; i++) {
000028r 1               ;
000028r 1  EE rr rr             inc     L0002
00002Br 1  4C rr rr             jmp     L001B
00002Er 1               ;
00002Er 1               ; }
00002Er 1               ;
00002Er 1  4C rr rr     L0004:  jmp     incsp4
000031r 1               
000031r 1               .endproc
000031r 1               
000031r 1               ; ---------------------------------------------------------------
000031r 1               ; int __near__ main (void)
000031r 1               ; ---------------------------------------------------------------
000031r 1               
000031r 1               .segment        "CODE"
000031r 1               
000031r 1               .proc   _main: near
000031r 1               
000031r 1               .segment        "BSS"
000001r 1               
000001r 1               L000F:
000001r 1  00 00                .res    2,$00
000003r 1               L0011:
000003r 1  00                   .res    1,$00
000004r 1               L0013:
000004r 1  00                   .res    1,$00
000005r 1               
000005r 1               .segment        "CODE"
000031r 1               
000031r 1               ;
000031r 1               ; uint8_t *dest = (uint8_t *) 0x0600;
000031r 1               ;
000031r 1  A2 06                ldx     #$06
000033r 1  A9 00                lda     #$00
000035r 1  8D rr rr             sta     L000F
000038r 1  8E rr rr             stx     L000F+1
00003Br 1               ;
00003Br 1               ; uint8_t bytes = 0xff;
00003Br 1               ;
00003Br 1  A9 FF                lda     #$FF
00003Dr 1  8D rr rr             sta     L0011
000040r 1               ;
000040r 1               ; uint8_t fill = 0x00;
000040r 1               ;
000040r 1  A9 00                lda     #$00
000042r 1  8D rr rr             sta     L0013
000045r 1               ;
000045r 1               ; memset8(dest, fill, bytes);
000045r 1               ;
000045r 1  AD rr rr             lda     L000F
000048r 1  AE rr rr             ldx     L000F+1
00004Br 1  20 rr rr             jsr     pushax
00004Er 1  AD rr rr             lda     L0013
000051r 1  20 rr rr             jsr     pusha
000054r 1  AD rr rr             lda     L0011
000057r 1  20 rr rr             jsr     _memset8
00005Ar 1               ;
00005Ar 1               ; return 0;
00005Ar 1               ;
00005Ar 1  A2 00                ldx     #$00
00005Cr 1  8A                   txa
00005Dr 1               ;
00005Dr 1               ; }
00005Dr 1               ;
00005Dr 1  60                   rts
00005Er 1               
00005Er 1               .endproc
00005Er 1               
00005Er 1               
